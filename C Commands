The language C has grown and evolved over the years. 
Since its inception, many standards were formed and new functionalities were added.

C has many commands we can use, but to do so we need to tell them program to access a certain library containing those commands.
There are the preprocessor directives, and they contain groups of commands revolving around a certain theme.
We need to add them at the very start of the program, using the #include command:

#include <LIBRARY_NAME> - Where LIBRARY_NAME is the name of the library we wish to access. Examples are:

#include <stdio.h> - Contains various functions for priting text out, user inputs, loops and various other things.
#include <math.h> - Contains mathematical functions such as the square root, setting the power of a value etc.


After adding our preprocessor directives, we need to add in our actual code, the code block that makes up our program.
We do that by writing various functions, of which every C program ALWAYS needs to contain a function called int main() {}:

#include <stdio.h>
int main() {
  CODE BLOCK
  return 0;
}

The return command signals an end of a function, or in this case the end of our program.
We can also define certain variables globally, so that we can use them anywhere in the program using the #define command:

#include <stdio.h>
#define PI 3.14159265359
int main() { ... }


This way, every time we use the variable PI, it will be as if we wrote the whole thing out. 
By defining important variables we can save ourselves a lot of time and frustration since their values will be constant,
minimizing the chance of a typo.
These are the so called "global" variables. They retain their value throughout the entire program and can be used anywhere.
They can, however, cause certain issues if we attempt to tamper with them, so it's advised to use "local" variables.
Local variables can only be used inside the function they are initialized, keeping in mind that every single variable we use
must be initialized, otherwise the program won't compile. We initialize variables in a few different ways:

        int X - Creates a variable called X which is an integer, rounding down any decimal number to an integer.
      float X - Creates a variable called X which is a real number.
     double X - Creates a variable called X which is a real number, being more precise than a float but taking up more memory.
   long int X - Creates a longer integer.
 long float X - Creates a longer real number.
long double X - Creates a longer precise real number.

Also, keep in mind that, since real numbers can't accurately be represented, when comparing them we need to use small intervals.
This only needs to be done if the numbers are a result of mathematical operations, because then their errors vary.

#define EPSILON 0.001
float A=0.05, B=0.05, X;
X = A + B;								// X should now be 0.1 but there are small errors...
if (X==0.1) printf("This will never print itself");			// This won't print itself because of the error
if (fabs(X â€“ 0.1) < EPSILON) printf("This will print itself");		// But this interval is just fine

If we don't use mathematical operations, and instead just compare numbers right after they're put into the program.
So for example:

scanf("%f, %f", a, b);
if(a==b) printf("This will print!");

The 'sizeof' operator can be pretty useful when determining the size of something.
It returns how many bytes of memory does the variable or type take up, so:

sizeof(char)			returns 1
sizeof(int)				returns 4
sizeof(float)			returns 4
sizeof(double)		returns 8

Now that we have the basics out of the way, let's get to know the different libraries which are supported in C.
________________________________________________________________________________________________________________________________
Library <stdio.h>:

printf("TEXT AND FORMAT MODIFIERS", VARIABLES)		// Prints out the text, returns the amount of characters printed out
// Formats: %d(int), %u(unsigned int), %f(float, double), %g(precise), %e(scientific), %c(char), %s(C-string), %n(nothing)
// Specifiers: hh(char), h(short), l(long), ll(long long), L(long double), *(for scanf, doesn't store the input in any variable)
// Escape sequences are sets of characters which are displayed differently than the way they're typed inside a printf function:
\n - New line
\t - Tab
\\ - Backslash (a single backslash, as you can see, is used to mark the start of an escape sequence)
\b - One character to the left (erase)
\r - Move back to the start of the line
\v - Vertical Tab
\f - New page (no effect on screen)
\" - The " character
\' - The ' character
\0 - Null character, marks the end of a character array
\NUMBER - Octal constant, put in any number
\xNUMBER - Hexadecimal constant
// Since we can add different things to a printf format (like %5.2f), here's a list of subspecifiers that go after the %:
- Allign left
+ Always print a signed number
0 Fill excess reserved space with zeroes
. Set precision of the output
*.* Add the reserved space and precision as parameters at the end of printf, but before the actual variable


scanf("FORMAT MODIFIERS", VARIABLES)		// Takes an input and places is in the corresponding variable, %lf for double
// Returns the amount of variables which were taken as input, test input like: 
	a=scanf("%d", x);				// Works if the user inputs a letter, doesn't work for real numbers 
	if(a==0) printf("No input.");	// (the decimal is treated as a new number), doesn't work for SPACE inputs

getchar()					// Prompts a single char input and returns it, allows for constructions like a=getchar();
putchar(CHAR)					// Prints CHAR to the screen

switch(VARIABLE){
    case VALUE:
        ...
        break;
    default:
        ...
}
________________________________________________________________________________________________________________________________
Library <math.h>:

pow(VARIABLE, EXPONENT)			// Returns VARIABLE to the power of EXPONENT
sqrt(VARIABLE)				// Returns the square root of VARIABLE
fabs(VARIABLE)				// Returns the absolute value of VARIABLE as a type 'double'
sin, cos, tan, asin, acos, atan		// Trigonometry
log(VARIABLE)				// Natural logarithm
log10(VARIABLE)				// Logarithm with the base 10
floor(VARIABLE)				// Rounds VARIABLE down
ceil(VARIABLE)				// Rounds VARIABLE up
round(VARIABLE)				// Rounds VARIABLE up or down, depending on the value (down for <0.5)
fmod(VARIABLE)				// Remainder when dividing with a real number
________________________________________________________________________________________________________________________________
Library <stdlib.h>:

abs(INTEGER)				// Returns the absolute value of INTEGER as an int
exit(INTEGER)				// Exits the program from any function with exit code INTEGER
int rand()					// Returns a random number from 0 to 2^31 - 1, needs a seed to be random
srand(INTEGER)				// Uses INTEGER as a seed for the random selection, such as 'time(NULL)'
________________________________________________________________________________________________________________________________
Library <string.h>:

