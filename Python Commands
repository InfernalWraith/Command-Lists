# Note: Words typed out exclusively in uppercase are examples of what type of parameter is used for a certain syntax
# Notes and comments will have the (#) character in front of them, and different commands will be separated with two empty lines

#Mathematical Operators

x + y addition
x - y subtraction
x * y multiplication
x / y division
x ** y  exponent {x to the power of y}
x % y remainder of division  {9 % 4 = 1}

____________________________________________________________________________________________________________________________
# BASIC COMMANDS


print "INSERT TEXT"
#Prints the text to the console

#We can use string formatting to add variables to our text block that's being printed out like so:
SAMPLE_STRING="example"
RESULT=2
print "This is an %s. 1+1 equals %d." % (SAMPLE_STRING, RESULT)
#This prints out: "This is an example. 1+1 equals 2."

#As of Python 2.6, we can avoid having to use specific formatting modifiers by using the more advanced "format" command:
print "Testing, testing, {test}".format(test="one, two, three!")
#This prints out: "Testing, testing, one, two, three!"


print VARIABLE
#Prints the value of VARIABLE


VARIABLE = x
#Assigns the value x to the variable VARIABLE


float(NUMBER)
#Converts an integer into a real number


int(NUMBER)
#Converts a real number into an integer by cutting off the decimal part


if CONDITION :
  ACTION 1
  ACTION 2
elif CONDITION :
  ACTION 1
  ACTION 2
else: 
  ACTION 1
  ACTION 2
#Tests if the condition is fulfilled and runs the indented code block accordingly.


VARIABLE=raw_input('MESSAGE')
#Prompts the user to input data with a preassigned message
#We can add modifiers such as .lower() or .upper() to the raw input itself in order to control what the user enters


int(VARIABLE)
#Attempts to turn a string(variable) into a number

____________________________________________________________________________________________________________________________
# STRINGS


len(VARIABLE)
#Gets the length (number of characters) of a variable or the string assigned to the variable
#Works only with strings and certain data types


STRING.upper()
#Sets the string of STRING to upper characters 
{variable = "Test"; variable.upper();    Output would be "TEST"}
{"Test".upper()                           Output is also "TEST"}


STRING.lower()
#Sets the string of STRING to lower characters, can be used with string variables or just nameless string constants 
{variable = "Test"; variable.lower();    Output would be "test"}
{"Test".lower()                           Output is also "test"}


str(VARIABLE)
#Changes the VARIABLE to string 
{variable = 25.21 output would be "25.21"}


STRING[X, Y]
#Grabs the part of a string from the X-th character to the Y-th character. 
#If you don't input Y, it prints out the remainder of the string.
{Python[2, 6] is "thon"}; {Superextraultraawesome[5, ] is "extraultraawesome"


VARIABLE.isalpha()
#Checks if the VARIABLE is made up of only letters and becomes True if it is, otherwise it becomes False


#Strings can also be "fused," or concantenated with the "+" operator:
print "Combining " + "strings" + " " + "is" + " simple!"
#This prints "Combining strings is simple" by adding them together 
#"Combining _strings_ _is_ simple_"           where "_" marks the end of a string is how they're added up

#If we want to combine strings with things that are not strings, such as numbers, we need to convert them to strings first:
print "My favorite number is " str(47)
#This prints out "My favorite number is 47"

____________________________________________________________________________________________________________________________
# DATE AND TIME


datetime.now()
#Gets the current date and time
#Must have a "from datetime import datetime" line before it, meaning we must import the "datetime" library in order to use it


VARIABLE = datetime.now()
print VARIABLE.year; print VARIABLE.month; print VARIABLE.day
#Prints the current year, month, or day



____________________________________________________________________________________________________________________________
# FUNCTIONS


def FUNCTION_NAME(ARGUMENT1, ARGUMENT2):
  ACTION 1
  ACTION 2
#Forms a function under the name FUNCTION_NAME and is called by typing FUNCTION_NAME(VALUE)
#Example:
  def greeting(language):
    if language == 'ba':
      print "Zdravo!"
    elif language == 'de':
      print "Hallo!"
    else:
      print "Hello!"
**Then the line " greeting('de') will print out "Hallo!" "
#ALSO WORKS WITH RETURN:
  def greeting(language):
    if language == 'ba':
      return "Zdravo!"
    elif language == 'de':
      return "Hallo!"
    else:
      return "Hello!"
**Then the line " greeting('ba'), 'Haris' will print out "Zdravo Haris" "

____________________________________________________________________________________________________________________________
# LOOPS


while CONDITION:
  ACTION 1
  ACTION 2
#Runs the indented lines of code while the condition is fulfilled. Infinite loops crash your stuff :(


for VARIABLE in [x, y, z...]
#Runs a loop once for each of the values inside the bracket assigned to the VARIABLE


break
#Stops the loop and continues to the next line of code, as opposed to the "continue" command which continues the loop
